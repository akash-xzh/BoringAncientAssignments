/// <reference types="node" />
import { EventEmitter } from 'events';
import { Options } from 'got/dist/source/index.js';
export interface WebProtocolOptions {
    url: string;
    engine: 'got' | 'puppeteer';
    httpOptions: Options;
    expect?: {
        contentSearch?: string;
        statusCode: number;
    };
}
export interface TcpProtocolOptions {
    host: string;
    port: number;
    options?: Record<string, any>;
    expect?: Record<string, any>;
}
export declare type SupportedProtocol = 'web' | 'tcp';
export declare type SupportedProtocolOptions = WebProtocolOptions | TcpProtocolOptions;
export interface MonitorOptions {
    protocol: SupportedProtocol;
    protocolOptions: SupportedProtocolOptions;
    interval: number;
}
export declare type MonitorState = 'running' | 'waiting' | 'stopped';
export declare class Monitor extends EventEmitter {
    readonly protocol: SupportedProtocol;
    readonly protocolOptions: SupportedProtocolOptions;
    readonly interval: number;
    private _intervalHandler;
    private _intervalHandlerTicking;
    constructor(opts: MonitorOptions, runImmediately?: boolean);
    get isTicking(): boolean;
    private resetState;
    start(force?: boolean): void;
    stop(): void;
    restart(): void;
    private ping;
}
