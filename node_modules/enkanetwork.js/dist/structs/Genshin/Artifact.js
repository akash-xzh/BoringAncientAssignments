"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artifact = void 0;
const client_1 = require("../../client");
/**
 * A class that structures the artifact's data.
 */
class Artifact {
    /**
     * The artifact's ID.
     */
    artifactId;
    /**
     * The artifact's level.
     */
    level;
    /**
     * The artifact's name text map hash.
     */
    nameTextMapHash;
    /**
     * The artifact's set name text map hash.
     */
    setNameTextMapHash;
    /**
     * The artifact's rank stars.
     */
    stars;
    /**
     * The artifact's main stat data.
     */
    mainstat;
    /**
     * The artifact's sub stats data.
     */
    substats;
    /**
     * The artifact's rolled sub stats IDs.
     */
    rolledSubstatsIds;
    /**
     * The item type.
     */
    itemType;
    /**
     * The artifact's icon.
     */
    icon;
    /**
     * The artifact's equip type.
     */
    equipType;
    /**
     * The artifact's name.
     */
    name;
    /**
     * The artifact's set name.
     */
    setName;
    /**
     * Creates a new `Artifact` instance.
     * @param data - The data of the artifact.
     * @param language - The language to get the name.
     */
    constructor(data, language) {
        const { genshin: genshinFinder } = new client_1.AssetFinder({ language });
        this.artifactId = data.itemId;
        this.level = data.reliquary.level;
        this.nameTextMapHash = data.flat.nameTextMapHash;
        this.setNameTextMapHash = data.flat.setNameTextMapHash;
        this.stars = data.flat.rankLevel;
        this.mainstat = new ArtifactMainStat(data);
        this.substats = data.flat.reliquarySubstats
            ? data.flat.reliquarySubstats.map((data) => new ArtifactSubstats(data))
            : [];
        this.rolledSubstatsIds = data.reliquary.appendPropIdList;
        this.itemType = data.flat.itemType;
        this.icon = data.flat.icon;
        this.equipType = data.flat.equipType;
        this.name = genshinFinder.hash(this.nameTextMapHash).value;
        this.setName = genshinFinder.hash(this.setNameTextMapHash).value;
    }
}
exports.Artifact = Artifact;
/**
 * A class that structures the artifact's main stat data.
 */
class ArtifactMainStat {
    /**
     * The artifact's main stat.
     */
    stat;
    /**
     * The artifact's main stat value.
     */
    statValue;
    /**
     * The artifact's main stat id.
     */
    id;
    /**
     * Creates a new `ArtifactMainStat` instance.
     * @param data - The data of the artifact.
     */
    constructor(data) {
        this.stat = data.flat.reliquaryMainstat.mainPropId;
        this.statValue = data.flat.reliquaryMainstat.statValue;
        this.id = data.reliquary.mainPropId;
    }
}
/**
 * A class that structures the artifact's sub stats data.
 */
class ArtifactSubstats {
    /**
     * The artifact's sub stat.
     */
    stat;
    /**
     * The artifact's sub stat value.
     */
    statValue;
    /**
     * Creates a new `ArtifactSubstats` instance.
     * @param data - The data of the artifact's substats.
     */
    constructor(data) {
        this.stat = data.appendPropId;
        this.statValue = data.statValue;
    }
}
