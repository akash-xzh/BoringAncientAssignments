"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SRRelics = void 0;
const handlers_1 = require("../../handlers");
/**
 * A class that structures the relic's data.
 */
class SRRelics {
    /**
     * The level of the relic.
     */
    level;
    /**
     * The information about the substats of the relic.
     */
    substatList;
    /**
     * The ID of the main stat.
     */
    mainStatId;
    /**
     * The type of relic.
     */
    type;
    /**
     * The ID of the relic.
     */
    relicId;
    /**
     * The information about the main stat of the relic.
     */
    mainStat;
    /**
     * The information about the substats stats of the relic.
     */
    substats;
    /**
     * The name hash of the relic set.
     */
    setNameHash;
    /**
     * The ID of the relic set.
     */
    setId;
    /**
     * Creates a new `SRRelics` instance.
     * @param data - The data of the relics.
     */
    constructor(data) {
        this.level = data.level;
        this.substatList =
            data.subAffixList && data.subAffixList.length > 0
                ? data.subAffixList.map((data) => new SRSubAffixList(data))
                : [];
        this.mainStatId = data.mainAffixId;
        this.type = data.type;
        this.relicId = data.tid;
        this.mainStat = new SRAffixes(data._flat.props[0]);
        this.substats =
            data._flat.props.length > 1
                ? data._flat.props.slice(1).map((data) => new SRAffixes(data))
                : [];
        this.setNameHash = data._flat.setName;
        this.setId = data._flat.setID;
    }
}
exports.SRRelics = SRRelics;
/**
 * A class that structures the substats info's data.
 */
class SRSubAffixList {
    /**
     * The ID of the substat.
     */
    substatId;
    /**
     * The number of rolls the substat had.
     */
    count;
    /**
     * The number of steps the substats had.
     */
    step;
    /**
     * Creates a new `SRSubAffixList` instance.
     * @param data - The data of substats info.
     */
    constructor(data) {
        this.substatId = data.affixId;
        this.count = data.cnt;
        this.step = data.step;
    }
}
/**
 * A class that structures the stats's data.
 */
class SRAffixes {
    /**
     * The type of stat.
     */
    type;
    /**
     * The raw value of the stat.
     */
    value;
    /**
     * Creates a new `SRAffixes` instance.
     * @param data - The data of the stats.
     */
    constructor(data) {
        this.type = data.type;
        this.value = data.value;
    }
    /**
     * @returns The parsed value of the stat
     */
    pasedValue() {
        return (0, handlers_1.ifProp)(this.value, this.type);
    }
}
